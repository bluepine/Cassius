Cassius update

I’m still solving the problem of CSS synthesis and generalization,
as described in the proposal document.
The basic problem statement has roughly not changed:
from an input which is a collection of mock-ups,
generate the CSS file which makes each mock-up render correctly.

For now, I’ve focused on mock-ups which are
a list of the exact location of each element in the DOM tree.
This simplifies the problem, since no image recognition needs to occur.
I’ve also stuck to completely-specified DOM trees for now,
and I’m not yet generating selectors (just CSS properties).

The approach has changed a bit from the one described in the proposal,
in that I’m now not (and never was) using a linear programming tool.
Instead, I’m writing a CSS renderer as a set of Z3 constraints,
and then using constraints on the output (the render tree)
to derive the necessary inputs (CSS properties).
Its works alright—I have some basic pages, mostly blogs, rendering correctly.

As for evaluation, a prototype exists and works on simple examples.
For now, it only handles a small fragment of CSS (horizontal block layout),
and is gaining support for more of CSS over time.
I’m planning to be pretty application-driven about this:
I’ll add features of CSS only when it is necessary for some application.
For example, it’s looking like vertical layout will be the next thing I implement,
followed by inline layout and floats.

Looking down the line, there may be different approaches to synthesizing selectors,
including bounding selector size and tossing it into the same constraint system,
or synthesizing selectors and properties separately.
I’m also currently ignoring the possibility of percentages in properties like width,
since that generates non-linear real constraints, which Z3 can’t handle well yet.
