#+TITLE: Scaling Cassius

To apply Cassius in products, we need to know how it scales. I've conducted some experiments; overall, they suggest that Cassius scales rather well, other than two major engineering changes that have to be made. Shoaib and I will likely work on those challenges this summer, since they are going to hinder most uses of Cassius.

In basic experiments, we've found that the main factor on Cassius's runtime is the number of boxes on the page. In its most basic uses, where no properties are being solved for, Cassius scales slightly super-linearly (power 1.33) with the number of boxes. This suggests that fairly large pages can be handled relatively quickly; for example, a 100-box page could take 7 or 8 seconds.

Once we start solving for CSS properties, Cassius gets slower. For example, with a 50-box page, solving for no properties might take 1.5 seconds, solving for 50 CSS properties (one per box) might take 3.5 seconds, and solving for 350 properties (7 per box) might take 4 minutes. We've found that while different properties do affect solve time differently, these differences are much smaller than the raw number of properties solved for.

Thus, applications of Cassius should focus on use cases where Cassius must solve for a small number of CSS properties. The proposed work on translating visual manipulations to code changes seems to fit this bill.

Two big challenges, beyond those described above, keep Cassius slow today.

The first is that Cassius spends a long time in its pre-processing steps. This pre-processing wasn't written with performance in mind, so it scales poorly (power 1.66) and takes a long time (near a minute for larger pages). Likely, a lot could be done to significantly improve its speed. As a largely engineering matter, it won't be a high priority this summer, but if it rises beyond the level of nuisance, it could be fixed.

The second is that Cassius handles the cascading process in CSS very poorly. The numbers given above all referred to a situation where per-element computed styles are solved for directly. When the computation of per-element computed styles from CSS rules is added in, the scaling behavior is significantly worse (as bad as cubic). Shoaib and I have some hypotheses as to why this is. Fixing this is a larger and more complex undertaking than the simple engineering issue above, but we have some ideas we feel hopeful about.
