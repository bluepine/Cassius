; -*- mode: scheme -*-

;; For gardenwalkthrough
(define-test (dropdown-offscreen b)
  (=>
   (matches (box-elt b) (child (id header) (tag ul) (tag li) (tag ul)))
   (not (onscreen b))))

; For rehabilitation-yoga
(define-test (contrast b)
  (=> (is-box/text (type b)) (has-contents b) (viewable b)
      (and
       (not (is-color/transparent (fg-color b)))
       (let ([fg (color.rgb (fg-color b))]
             [bg
              (let ([ab (ancestor b (not (is-color/transparent (bg-color ?))))])
                (ite (is-box ab)
                     (color.rgb (bg-color ab))
                     (color.rgb color/white)))]
             [threshold 3])
         (or (>= (+ (lum fg) .05) (* threshold (+ (lum bg) .05)))
             (>= (+ (lum bg) .05) (* threshold (+ (lum fg) .05))))))))

;; For tailorshopwebsitetemplate
(define-test (three-column b1 b2)
  (and
   (=> (matches (box-elt b1) (child (id featured) (class first) (tag div)))
       (matches (box-elt b2) (child (id featured) (class first) (tag span)))
       (and (= (top-outer b1) (top-outer b2))
            (<= (right-outer b1) (left-outer b2))))
   (=> (matches (box-elt b1) (child (id featured) (class first) (tag span)))
       (matches (box-elt b2) (child (id featured) (class last)))
       (and (= (top-outer b1) (top-outer b2))
            (<= (right-outer b1) (left-outer b2))))
   (=> (matches (box-elt b1) (child (id home) (class section)))
       (matches (box-elt b2) (child (id home) (class sidebar)))
       (and (= (top-outer b1) (top-outer b2))
            (<= (right-outer b1) (left-outer b2))))
   (=> (matches (box-elt b1) (desc (id footer) (class first)))
       (matches (box-elt b2) (desc (id footer) (class last)))
       (and (= (top-outer b1) (top-outer b2))
            (<= (right-outer b1) (left-outer b2))))
   (=> (matches (box-elt b1) (child (id home) (class section) (tag ul) (tag li)))
       (matches (box-elt b2) (child (id home) (class section) (tag ul) (tag li)))
       (< (&elt b1) (&elt b2))
       (and (= (top-outer b1) (top-outer b2))
            (<= (right-outer b1) (left-outer b2))))))

;; For puppy
(define-test (no-text-on-picture b1 b2)
  (=> (matches (box-elt b1) (id background))
      (let ([e (ancestor b2 (is-elt (box-elt ?)))])
        (matches (box-elt e) (desc (id background) *)))
      (is-box/text (type b2))
      (<= (right-border b2) (- (right-content b1) 300))))
