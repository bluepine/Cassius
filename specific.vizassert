;; -*- mode: scheme -*-

; For rehabilitation-yoga
(define-test (contrast b)
  (=> (has-type b text) (has-contents b) (viewable b)
      (and
       (!= (fg b) transparent)
       (let ([fg (fg b)]
             [bg* (let ([ab (ancestor b (!= (bg ?) transparent))])
                    (if (!= ab null) (bg ab) (color white)))])
         (or (>= (+ (luminance fg) .05) (* 3 (+ (luminance bg*) .05)))
             (>= (+ (luminance bg*) .05) (* 3 (+ (luminance fg) .05))))))))

;; For puppy
(define-test (no-text-on-picture b1 b2)
  (=> (matches b1 (id background))
      (has-type b2 text)
      (descends b2 (id background))
      (<= (right b2) (- (right b1 content) 300))))

;; For gardenwalkthrough
(define-test (dropdown-offscreen b)
  (=>
   (matches b (child (id header) (tag ul) (tag li) (tag ul)))
   (not (onscreen b))))

;; For tailorshopwebsitetemplate
(define-test (three-column b1 b2)
  (and
   (=> (matches b1 (child (id featured) (class first) (tag div)))
       (matches b2 (child (id featured) (class first) (tag span)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))
   (=> (matches b1 (child (id featured) (class first) (tag span)))
       (matches b2 (child (id featured) (class last)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))
   (=> (matches b1 (child (id home) (class section)))
       (matches b2 (child (id home) (class sidebar)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))
   (=> (matches b1 (desc (id footer) (class first)))
       (matches b2 (desc (id footer) (class last)))
       (and (= (top b1 outer) (top b2 outer))
            (<= (right b1 outer) (left b2 outer))))))
