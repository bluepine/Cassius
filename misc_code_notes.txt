
From debug.rkt
(define (run-file fname pname #:debug [debug '()] #:truncate truncate)

  where # means optional keyword argument
  where [] means default argument
  e.g. (define (test #:check mate)
        (printf mate))

        so calling (test #:check "foo")  ; mate is the identifier of string "foo"
        print "foo"
        but (test "foo") throws an exception


(match-define pat expr)
  Defines the names bound by pat to the values produced by matching against the result of expr.

(hash-ref hash key)
  Returns the value for key in hash-table
  e.g. (hash-ref (call-with-input-file fname parse-file) (string->symbol pname))
  looks up 'pname in some hash-table?


(call-with-input-file path proc)
  Calls open-input-file with the path and mode-flag arguments,
  and passes the resulting port to proc.
  The result of proc is the result of the call-with-input-file call.

  e.g. (call-with-input-file fname parse-file)
  --- opens fname, & parses file (?) (parse-file = some racket library procedure, not defined in cassius)

(module+ main)
  Declares and/or adds to a submodule main.


(command-line
#:program "cassius accept" ;; name-expr
#:multi ;; flag-clause
  Parses a command line according to the specification in the flag-clauses.
  The name-expr "cassius accept" should produce a path/string to be used as the program name
   for reporting errors when the command-line is ill-formed

   #multi just means any or multiple of the following flags can be set
-------------------------------------------------------------------------------
frontend.rkt

eprintf just prints something after error
