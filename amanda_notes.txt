browser-style.rkt
 - Gets a set of default browser User agent stylesheets
 - These will eventually become part of the constraints that are generated

Cassius tools, and what they do:
- accept, verify, debug
	- Accept and debug will take the stylesheet and document as specified, and highlight the rules that are conflicting
	- Verify tries to find a counterexample where the stylesheet/document combination will fail (browser/width combination)
- smt2
	- Print out the constraints for a given stylesheet and document

I couldn't figure out what these tools did that was different than accept and verify, so I'll send these to Pavel as well.
- dump
- mutants
- render
- sketch

Functions that may be important:
z3.rkt
 - z3-solve calls into Z3 with the constructed set of constraints and retrieves the results from the solver
 - We can look here to see how it parses the output (unsat-core into the set of rules that are incorrect)

main.rkt
 - solve-constraints - Calls into z3 'z3-solve' method passing in the stylesheet, tree, and constraints. It takes the results from Z3 and extracts the stylesheet and
   tree from the results, and translates the unsat core into an interpretation of the properties and values that should be highlighted as incorrect in the tree and
   stylesheet
- extract-core - Extracts the bad rules from the stylesheet based on the results Z3 returned, and annotates the bad properties and bad values in the tree with 'bad' so that
   in the printing function, returns the results back to the tool 'accept.rkt' for example, and the tool calls into the printing functions to print them out

The unsat core returned from the solver looks like this (removeID example):
 (box/block/elt$3^1^because/!positioned/elt$3-flow-box^from-style/width/b/elt$3-flow-box^1
  box/block/elt$3^1^because/!positioned/elt$3-flow-box^because/flow/elt$3-flow-box^from-style/border-left-width/b/elt$3-flow-box^1
  box/block/elt$3^1^because/!positioned/elt$3-flow-box^because/flow/elt$3-flow-box^from-style/border-right-width/b/elt$3-flow-box^1
  box/block/elt$3^1^because/!positioned/elt$3-flow-box^because/flow/elt$3-flow-box^from-style/padding-right/b/elt$3-flow-box^1
  box/block/elt$3^1^because/!positioned/elt$3-flow-box^because/flow/elt$3-flow-box^from-style/padding-left/b/elt$3-flow-box^1
  box-element/elt$3^3^1 box-element/elt$3^2^1 info/elt$3^29^1 info/elt$3^27^1 info/elt$3^25^1
  info/elt$3^compute-style/position/elt$3-elt/tag/div/id/box^1^1 info/elt$3^compute-style/padding-left/elt$3-elt/tag/div/id/box^1^1
  info/elt$3^compute-style/padding-right/elt$3-elt/tag/div/id/box^1^1 info/elt$3^compute-style/width/elt$3-elt/tag/div/id/box^1^1 box-width/elt$3^1^1
  cascade/eq/elt$8/width^1^1 cascade/ge/elt$8/user/1/width^1^1 cascade/eq/elt$3/width^1^1 cascade/ge/elt$3/user/2/width^1^1
  cascade/ge/elt$3/user/1/width^1^1 cascade/eq/elt$3/padding-left^2^1 cascade/eq/elt$3/padding-right^2^1 cascade/eq/elt$3/float^2^1
  cascade/eq/elt$3/position^2^1 cascade/eq/elt$3/margin-left^1^1 cascade/ge/elt$3/user/1/margin-left^1^1 rule/user/2/width rule/user/2/a-rule^3^1
  rule/user/2/a-rule^2^1 rule/user/2/a-rule^1^1 rule/user/1/width rule/user/1/margin-left rule/user/1/a-rule^3^1 rule/user/1/a-rule^1^1
  rule/user/1/a-rule^2^1))/* Generated code below */

Then it gets parsed into this (removeID example):
'((box block elt$3) "1" (because !positioned elt$3-flow-box) (from-style width b elt$3-flow-box) "1")
'((box block elt$3) "1" (because !positioned elt$3-flow-box) (because flow elt$3-flow-box) (from-style border-left-width b elt$3-flow-box) "1")
'((box block elt$3) "1" (because !positioned elt$3-flow-box) (because flow elt$3-flow-box) (from-style border-right-width b elt$3-flow-box) "1")
'((box block elt$3) "1" (because !positioned elt$3-flow-box) (because flow elt$3-flow-box) (from-style padding-right b elt$3-flow-box) "1")
'((box block elt$3) "1" (because !positioned elt$3-flow-box) (because flow elt$3-flow-box) (from-style padding-left b elt$3-flow-box) "1")
'((box-element elt$3) "3" "1")
'((box-element elt$3) "2" "1")
'((info elt$3) "29" "1")
'((info elt$3) "27" "1")
'((info elt$3) "25" "1")
'((info elt$3) (compute-style position elt$3-elt tag div id box) "1" "1")
'((info elt$3) (compute-style padding-left elt$3-elt tag div id box) "1" "1")
'((info elt$3) (compute-style padding-right elt$3-elt tag div id box) "1" "1")
'((info elt$3) (compute-style width elt$3-elt tag div id box) "1" "1")
'((box-width elt$3) "1" "1")
'((cascade eq elt$8 width) "1" "1")
'((cascade ge elt$8 user 1 width) "1" "1")
'((cascade eq elt$3 width) "1" "1")
'((cascade ge elt$3 user 2 width) "1" "1")
'((cascade ge elt$3 user 1 width) "1" "1")
'((cascade eq elt$3 padding-left) "2" "1")
'((cascade eq elt$3 padding-right) "2" "1")
'((cascade eq elt$3 float) "2" "1")
'((cascade eq elt$3 position) "2" "1")
'((cascade eq elt$3 margin-left) "1" "1")
'((cascade ge elt$3 user 1 margin-left) "1" "1")
'((rule user 2 width))
'((rule user 2 a-rule) "3" "1")
'((rule user 2 a-rule) "2" "1")
'((rule user 2 a-rule) "1" "1")
'((rule user 1 width))
'((rule user 1 margin-left))
'((rule user 1 a-rule) "3" "1")
'((rule user 1 a-rule) "1" "1")
'((rule user 1 a-rule) "2" "1")

Then it looks for only the user rules (rule user ones) from the above and outputs this.
These are the constraints corresponding to the CSS rules that are conflicting:
'((child (and (id box-container)) (and (id box))) (width (px 50)) (height (px 50)))
'((child (and (id box-container)) (and (id box))) (width (bad (px 50))) (height (px 50)))
'((child (and (id box-container)) (and (id box))) (width (bad (px 50))) (height (px 50)))
'((child (and (id box-container)) (and (id box))) (width (bad (px 50))) (height (px 50)))
'((child (and (id box-container)) (and (tag div))) (width (px 150)) (height (px 150)) (margin-left (px 10)))
'((child (and (id box-container)) (and (tag div))) (width (bad (px 150))) (height (px 150)) (margin-left (px 10)))
'((child (and (id box-container)) (and (tag div))) (width (bad (px 150))) (height (px 150)) (margin-left (bad (px 10))))
'((child (and (id box-container)) (and (tag div))) (width (bad (px 150))) (height (px 150)) (margin-left (bad (px 10))))
'((child (and (id box-container)) (and (tag div))) (width (bad (px 150))) (height (px 150)) (margin-left (bad (px 10))))/* Generated code below */

accept.rkt
- calls 'displayln (stylesheet->string.. ' on the results returned from extract-core, and the print/css.rkt, print/tree.rkt functions print out the bad rules and tree
  with the incorrect values highlighted in red.

Using the steps below, we can inspect the constraints that Cassius generates, change them around, and see how Z3 responds.

Here is how we can run these constraints manually through Z3 and see the resulting output:
- Use smt2 tool to output the constraints to a file (<name>.z3)
- Add '(get-unsat-core)' to the end of the file to tell it to print out the unsat-core (unsatisfied rules)
- Run this command on the file to get the results
  z3 -st -smt2 <constraints>.z3

Questions for pavel
- How to use debug parameter
- Difference between accept, sketch, debug, verify, rsketch
- In the Z3 core results, what do these mean on the end of each returned rule '^2^1' (for example)
- How to have Cassius fill out holes in CSS sheet. Replacing styles with question mark wasn't working

To Do:
- Write a function to take in the z3 unsat cores, constraints file, stylesheet, and trees and print out the results
- This will allow us to more easily manipulate the constraints and see results to see what z3 does highlighted in the stylesheet rather than needingi
  to look at the core.
