;; -*- mode: scheme -*-

(define-test (paragraph-spacing b1 b2)
  (=> (has-type b1 line) (viewable b1)
	  (has-type b2 line) (viewable b2)
	  (!= b1 b2) (< (top b1) (top b2))
	  (let ([p1 (ancestor b1 (matches ? (tag p)))]
	        [p2 (ancestor b2 (matches ? (tag p)))])
		(=> (!= p1 null) (!= p2 null) (!= p1 p2)
		    (= (next p1) p2) (vertically-adjacent p1 p2)
			(<= (+ (* 1.30 (max (height b1) (height b2))) (top b1)) (top b2))))))

;;; 6
; TODO: needs "no-styles"

;; TODO: needs support for &elt or similar
#;
(define-test (tab-ordering b1 b2)
  (=> (is-interactive b1) (is-interactive b2)
      (< (&elt b1) (&elt b2))
      (or (< (bottom b1) (top b2))
          (and (<= (top b1) (bottom b2))
               (< (right b1) (left b2))))))

(define-test (button-size b)
  (=> (is-interactive b) (and (>= (width b) 30) (>= (height b) 30))))

;; TODO: needs color-distance
#;
(define-test (link-distinctive b)
  (=> (has-type b text)
      (let ([eb (ancestor b (not (anonymous? ?)))])
        (matches eb (tag a)))
      (>= (color-distance (fg b) (fg (ancestor b (has-type ? line)))) 32)))
; TODO: active color

;; TODO: needs color-distance
#;
(define-test (interactive-distinctive b1 b2)
  (=> (is-interactive b1) (viewable b1) (viewable b2)
      (not (is-interactive b2))
      (>= (color-distance (fg b1) (fg b2)) 0.1)))


;;; 14
; TODO: How do we measure that?

;;; 15
; TODO: Needs some sort of global measure

;; Skipped: 11, 12, 14, 19, 20, 21
;; Duplicates: 17 & 18
